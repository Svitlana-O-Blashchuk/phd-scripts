from tkinter import Tk, Button, Frame, Scrollbar, Canvas, font
from gtts import gTTS
from playsound import playsound
import os
import time

def play_letter_sequence():
    # Split the sequence into individual characters
    sequence = "f b a c m n a a j k l b a f a k d e a a a j a m o f a a b"
    letters = sequence.split()
    
    # Create a unique temporary file for each letter
    for i, letter in enumerate(letters):
        temp_file = f"temp_{i}.mp3"
        tts = gTTS(text=letter, lang='nl')
        tts.save(temp_file)
        playsound(temp_file)
        time.sleep(1)  # Wait 1 second between letters
        try:
            os.remove(temp_file)
        except:
            pass

def play_instruction(text):
    tts = gTTS(text=text, lang='nl')
    tts.save("instruction.mp3")
    playsound("instruction.mp3")
    try:
        os.remove("instruction.mp3")
    except:
        pass

def create_scrollable_window():
    window = Tk()
    window.title("MoCA Test Instructions")
    window.geometry("600x600")

    # Create main container frame
    main_frame = Frame(window)
    main_frame.pack(fill="both", expand=True)

    # Create canvas and scrollbar
    canvas = Canvas(main_frame)
    scrollbar = Scrollbar(main_frame, orient="vertical", command=canvas.yview)
    canvas.configure(yscrollcommand=scrollbar.set)

    # Pack scrollbar and canvas
    scrollbar.pack(side="right", fill="y")
    canvas.pack(side="left", fill="both", expand=True)

    # Create scrollable frame
    scrollable_frame = Frame(canvas)
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw", width=canvas.winfo_reqwidth())

    # Add mouse wheel scrolling
    def _on_mousewheel(event):
        canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    
    canvas.bind_all("<MouseWheel>", _on_mousewheel)  # Windows
    canvas.bind_all("<Button-4>", lambda e: canvas.yview_scroll(-1, "units"))  # Linux
    canvas.bind_all("<Button-5>", lambda e: canvas.yview_scroll(1, "units"))   # Linux

    # Create fonts before creating buttons
    base_font = font.Font(size=14)  # Base font size for small window
    italic_font = font.Font(size=14, slant='italic')  # Italic font for special buttons
    small_font = font.Font(size=12)  # Smaller font for correct/incorrect buttons

    # Create a container frame for buttons with center alignment
    button_container = Frame(scrollable_frame)
    button_container.pack(expand=True, fill="both")

    # Function to update scroll region and frame width
    def update_canvas_size(event):
        canvas.configure(scrollregion=canvas.bbox("all"))
        # Update the width of the scrollable frame to match the canvas
        canvas.itemconfig(canvas.find_withtag("all")[0], width=canvas.winfo_width())
        # Update button heights and font sizes based on canvas height
        for button in button_container.winfo_children():
            for child in button.winfo_children():  # Iterate through buttons in frames
                if isinstance(child, Button):  # Only process Button widgets
                    # Calculate height based on canvas height, with 2.5x scaling
                    base_height = 2  # Base height for small window
                    max_height = 1.25   # Maximum height (reduced from 2.5 to 1.25)
                    canvas_height = canvas.winfo_height()
                    # Scale height between base_height and max_height based on canvas height
                    if canvas_height > 800:  # If window is larger than 800px
                        scaled_height = max_height  # Use maximum height
                        scaled_font_size = 28  # Maximum font size
                    else:
                        # Linear scaling between 600px and 800px
                        scale_factor = (canvas_height - 600) / (800 - 600)
                        scaled_height = base_height + (max_height - base_height) * max(0, min(1, scale_factor))
                        scaled_font_size = 14 + (28 - 14) * max(0, min(1, scale_factor))
                    
                    # Get button's tag to determine if it's special
                    is_special = 'special' in child.bindtags()
                    is_correct = 'correct' in child.bindtags()
                    
                    # Configure button height
                    if not is_correct:  # Don't scale height for correct/incorrect buttons
                        child.configure(height=int(scaled_height))
                    
                    # Configure font - maintain italic for special buttons
                    if is_special:
                        new_font = font.Font(size=int(scaled_font_size), slant='italic')
                        child.configure(font=new_font)
                    elif not is_correct:  # Don't scale font for correct/incorrect buttons
                        new_font = font.Font(size=int(scaled_font_size))
                        child.configure(font=new_font)

    scrollable_frame.bind("<Configure>", update_canvas_size)
    canvas.bind("<Configure>", update_canvas_size)

    # List of questions and their corresponding instructions in Dutch
    questions = [
        ("Teken een lijn", "Teken een lijn, van een cijfer naar een letter en in oplopende volgorde. Begin hier  en teken een lijn van 1 naar A, dan naar 2 en zo verder. Stop hier."),
        ("Teken een figuur", "Teken dit figuur zo nauwkeurig mogelijk na in de ruimte hieronder."),
        ("Klok tekenen", "Teken een klok. Plaats er alle cijfers in en zet de wijzers op 10 over 11."),
        ("Dier benoemen", "Hoe heet dit dier?"),
        ("Geheugentest 1", "Dit is een geheugentest. Ik ga een rij woorden voorlezen die u moet onthouden, nu maar ook straks. Luister goed. Als ik klaar ben, vertelt u me alle woorden die u hebt onthouden. Het maakt niet uit in welke volgorde u ze opnoemt."),
        ("Woorden voorlezen 1", "Gezicht, fluweel, kerk, madelief, rood", True),
        ("Geheugentest 2", "Ik ga dezelfde lijst een tweede keer voorlezen. Probeer zo veel mogelijk woorden te onthouden en vertel ze me, ook de woorden die u de eerste keer hebt opgenoemd."),
        ("Woorden voorlezen 2", "Gezicht, fluweel, kerk, madelief, rood", True),
        ("Herinneren woorden", "Ik zal u aan het eind van deze test opnieuw vragen welke woorden u zich nog weet te herinneren."),
        ("Cijfers nazeggen instruction", "Ik ga een aantal cijfers opnoemen en als ik klaar ben, moet u ze in dezelfde volgorde nazeggen als ik ze heb gezegd."),
        ("21854", "2 1 8 5 4", True),
        ("Cijfers omgekeerd nazeggen instruction", "Nu ga ik weer cijfers opnoemen, maar zodra ik klaar ben, moet u ze in omgekeerde volgorde nazeggen."),
        ("742", " 7 4 2", True),
        ("Letter herhalen instructions", "Ik ga u een reeks letters voorlezen. Iedere keer dat ik de letter A noem, tikt u eenmaal met uw hand op tafel. Wanneer ik een andere letter noem, tikt u niet met uw hand op tafel."),
        ("Letter herhalen", "f b a c m n a a j k l b a f a k d e a a a j a m o f a a b", True),
        ("Aftrekken van 7", "Wilt u van 100 zeven aftrekken en van wat overblijft weer zeven aftrekken en zo doorgaan tot ik stop zeg."),
        ("Zin herhalen 1 instructions", "Ik ga u een zin voorlezen. Zeg deze na zodra ik klaar ben, precies zoals ik hem heb gezegd."),
        ("Zin herhalen 1", "Ik  weet  alleen  dat  Jan  vandaag  geholpen  zou  worden.", True),
        ("Zin herhalen 2 instructions", "Nu ga ik u een andere zin voorlezen. Zeg deze na, precies zoals ik hem heb gezegd."),
        ("Zin herhalen 2", "De  kat  verstopte  zich  altijd  onder  de  bank  als  er  honden  in  de  kamer  waren.", True),
        ("Woorden fluency", "Noem zo veel mogelijk woorden als u kunt bedenken die beginnen met de letter D. Na één minuut vraag ik u te stoppen. Eigennamen, getallen en vervoegingen van werkwoorden zijn niet toegestaan. Bent u er klaar voor?"),
        ("Categorieën", "Ik noem twee woorden en ik wil dan graag dat u me vertelt tot welke categorie deze woorden behoren."),
        ("Apple/banan", "Een sinaasappel en een banaan.", True),
        ("Trein/fiets", "Nu. een trein en een fiets.", True),
        ("Liniaal/horloge", "Nu. een liniaal en een horloge.", True),
        ("Herinneren woorden", "Ik heb u eerder een rij met woorden voorgelezen, en ik vroeg u ze te onthouden. Vertel me zo veel mogelijk woorden die u zich kunt herinneren."),
        ("Anagram aanwijzingen", "Ik geef u enkele aanwijzingen om te kijken of het helpt bij het herinneren van de woorden.")
    ]

    # Create and pack buttons
    for item in questions:
        question = item[0]
        instruction = item[1]
        is_special = len(item) > 2 and item[2]

        # Create button frame for positioning
        btn_frame = Frame(button_container)
        btn_frame.pack(fill='x', pady=10)

        # Create the button with special handling for Letter herhalen
        if question == "Letter herhalen":
            button = Button(btn_frame, text=question, command=play_letter_sequence,
                          width=30, height=2)
        else:
            button = Button(btn_frame, text=question, command=lambda q=instruction: play_instruction(q),
                          width=30, height=2)

        # Configure special buttons
        if is_special:
            button.configure(
                font=italic_font,
                bg='lightblue',
                relief='groove'
            )
            button.pack(side='right', padx=(0, 200))
            
            # If this is Apple/banan, create response buttons
            if question == "Apple/banan":
                # Create frame for response buttons
                response_frame = Frame(button_container)
                response_frame.pack(fill='x', pady=0)
                
                # Create Correct button (left half)
                correct_btn = Button(response_frame, text="Correct",
                                   command=lambda: play_instruction("Ja, beide woorden behoren tot de categorie Fruit."),
                                   width=15, height=1)
                correct_btn.configure(
                    font=small_font,
                    bg='lightgreen',
                    relief='groove'
                )
                correct_btn.pack(side='left', padx=(1020, 0))  # Left half of Apple/banan
                
                # Create Not Correct 1 button (right half)
                nc1_btn = Button(response_frame, text="Not Correct 1",
                               command=lambda: play_instruction("Weet u nog een categorie waartoe deze woorden behoren?"),
                               width=15, height=1)
                nc1_btn.configure(
                    font=small_font,
                    bg='lightcoral',
                    relief='groove'
                )
                nc1_btn.pack(side='right', padx=(0, 200))  # Right half of Apple/banan
                
                # Create Not Correct 2 button (below Not Correct 1)
                nc2_frame = Frame(button_container)
                nc2_frame.pack(fill='x', pady=0)
                
                nc2_btn = Button(nc2_frame, text="Not Correct 2",
                               command=lambda: play_instruction("Ja, en ze behoren ook beide tot de categorie Fruit."),
                               width=15, height=1)
                nc2_btn.configure(
                    font=small_font,
                    bg='lightcoral',
                    relief='groove'
                )
                nc2_btn.pack(side='right', padx=(0, 200))  # Aligned with Not Correct 1
        else:
            button.configure(font=base_font)
            button.pack(anchor='center')

        # After Anagram aanwijzingen, create the word buttons
        if question == "Anagram aanwijzingen":
            # Create horizontal frame for word buttons
            word_frame = Frame(button_container)
            word_frame.pack(fill='x', pady=10)

            # Create word buttons in a single row
            word_buttons = [
                ("Gezicht", "Het eerste woord was een lichaamsdeel."),
                ("Fluweel", "Het tweede woord was een soort textiel."),
                ("Kerk", "Het derde woord was een soort gebouw."),
                ("Madelief", "Het vierde woord was een soort bloem."),
                ("Rood", "Het vijfde woord was een kleur.")
            ]

            # Create word buttons horizontally
            for word, instruction in word_buttons:
                button = Button(word_frame, text=word, command=lambda q=instruction: play_instruction(q),
                              width=15, height=2)
                button.configure(
                    font=base_font,
                    relief='groove'
                )
                button.pack(side='left', padx=5, expand=True)

            # Create second row of word buttons (Gezicht2, etc.)
            word2_frame = Frame(button_container)
            word2_frame.pack(fill='x', pady=10)

            word2_buttons = [
                ("Gezicht2", "Welk van de volgende woorden denkt u dat het was: NEUS, GEZICHT of HAND?"),
                ("Fluweel2", "Welk van de volgende woorden denkt u dat het was: spijkerstof, fluweel, katoen "),
                ("Kerk2", "Welk van de volgende woorden denkt u dat het was: kerk, school, ziekenhuis"),
                ("Madelief2", "Welk van de volgende woorden denkt u dat het was: roos, madelief, tulp"),
                ("Rood2", "Welk van de volgende woorden denkt u dat het was: rood, blauw, groen")
            ]

            # Create second row of buttons horizontally
            for word, instruction in word2_buttons:
                button = Button(word2_frame, text=word, command=lambda q=instruction: play_instruction(q),
                              width=15, height=2)
                button.configure(
                    font=base_font,
                    relief='groove'
                )
                button.pack(side='left', padx=5, expand=True)

    # Create remaining buttons (only Datum, Datum full, and Locatie)
    remaining_questions = [
        ("Datum", "Wat is de datum van vandaag?"),
        ("Datum full", "Vertel me welk jaar, maand, precieze datum, en dag van de week het is."),
        ("Locatie", "Vertel me nu: hoe heet dit gebouw en in welke stad/plaats zijn we nu?")
    ]

    # Create remaining buttons
    for item in remaining_questions:
        question = item[0]
        instruction = item[1]

        # Create button frame for positioning
        btn_frame = Frame(button_container)
        btn_frame.pack(fill='x', pady=10)

        # Create the button
        button = Button(btn_frame, text=question, command=lambda q=instruction: play_instruction(q),
                       width=30, height=2)
        button.configure(font=base_font)
        button.pack(anchor='center')

    window.mainloop()

if __name__ == "__main__":
    create_scrollable_window()
